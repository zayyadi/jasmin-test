# Generated by CodiumAI
from main.core.smpp.stats import Stats
from config.settings.com import STANDARD_PROMPT


# Dependencies:
# pip install pytest-mock
import pytest


class TestStats:
    # get_smppccm method returns smppccm dictionary when given a valid cid
    def test_get_smppccm_valid_cid(self, mocker):
        # Mock the telnet object
        telnet_mock = mocker.Mock()
        stats = Stats(telnet_mock)

        # Mock the telnet.sendline method
        telnet_mock.sendline.return_value = None

        # Mock the telnet.expect method
        telnet_mock.expect.return_value = 2
        telnet_mock.match.group.return_value = "key value\nkey2 value2"

        # Call the method under test
        result = stats.get_smppccm("valid_cid")

        # Assert the result
        assert result == {"key": "value", "key2": "value2"}

        # Assert that the telnet methods were called correctly
        telnet_mock.sendline.assert_called_once_with("smppccm -s valid_cid")
        telnet_mock.expect.assert_called_once_with(
            [
                r".+Unknown connector:.*" + STANDARD_PROMPT,
                r".+Usage:.*" + STANDARD_PROMPT,
                r"(.+)\n" + STANDARD_PROMPT,
            ]
        )
        telnet_mock.match.group.assert_called_once_with(1)

    # list_smpp method returns a list of dictionaries containing stats for each smpp connector
    def test_list_smpp(self, mocker):
        # Mock the telnet object
        telnet_mock = mocker.Mock()
        stats = Stats(telnet_mock)

        # Mock the telnet.sendline method
        telnet_mock.sendline.return_value = None

        # Mock the telnet.expect method
        telnet_mock.expect.return_value = 0
        telnet_mock.match.group.return_value = "key value\nkey2 value2\n"

        # Call the method under test
        result = stats.list_smpp()

        # Assert the result
        assert result == [{"key": "value", "key2": "value2"}]

        # Assert that the telnet methods were called correctly
        telnet_mock.sendline.assert_called_once_with("stats --smppcs")
        telnet_mock.expect.assert_called_once_with([r"(.+)\n" + STANDARD_PROMPT])
        telnet_mock.match.group.assert_called_once_with(0)

    # list_s method returns a dictionary containing stats for all smpp connectors
    def test_list_s(self, mocker):
        # Mock the list_smpp method
        mocker.patch.object(
            Stats,
            "list_smpp",
            return_value=[
                {
                    "cid": "123",
                    "connected_at": ["2021-01-01"],
                    "bound_at": "2021-01-02",
                    "disconnected_at": ["2021-01-03"],
                    "submits": "10",
                    "delivers": "5",
                    "qos_err": "0",
                    "other_err": "0",
                }
            ],
        )

        # Create an instance of Stats
        stats = Stats(mocker.Mock())

        # Call the method under test
        result = stats.list_s()

        # Assert the result
        assert result == {
            "stats": [
                {
                    "cid": "123",
                    "connected_at": ["2021-01-01"],
                    "bound_at": "2021-01-02",
                    "disconnected_at": ["2021-01-03"],
                    "submits": "10",
                    "delivers": "5",
                    "qos_err": "0",
                    "other_err": "0",
                }
            ]
        }

    # get_smppccm method handles non-ascii characters in smppccm values
    def test_get_smppccm_non_ascii(self, mocker):
        # Mock the telnet object
        telnet_mock = mocker.Mock()
        stats = Stats(telnet_mock)

        # Mock the telnet.sendline method
        telnet_mock.sendline.return_value = None

        # Mock the telnet.expect method
        telnet_mock.expect.return_value = 2
        telnet_mock.match.group.return_value = "key value\nkey2 \xc3\xa9"

        # Call the method under test
        result = stats.get_smppccm("valid_cid")

        # Assert the result
        assert result == {"key": "value", "key2": "\xc3\xa9"}

        # Assert that the telnet methods were called correctly
        telnet_mock.sendline.assert_called_once_with("smppccm -s valid_cid")
        telnet_mock.expect.assert_called_once_with(
            [
                r".+Unknown connector:.*" + STANDARD_PROMPT,
                r".+Usage:.*" + STANDARD_PROMPT,
                r"(.+)\n" + STANDARD_PROMPT,
            ]
        )
        telnet_mock.match.group.assert_called_once_with(1)

    # list_smpp method handles empty lines in smppcs output
    def test_list_smpp_empty_lines(self, mocker):
        # Mock the telnet object
        telnet_mock = mocker.Mock()
        stats = Stats(telnet_mock)

        # Mock the telnet.sendline method
        telnet_mock.sendline.return_value = None

        # Mock the telnet.expect method
        telnet_mock.expect.return_value = 0
        telnet_mock.match.group.return_value = "\n\nkey value\n\nkey2 value2\n\n"

        # Call the method under test
        result = stats.list_smpp()

        # Assert the result
        assert result == [{"key": "value", "key2": "value2"}]

        # Assert that the telnet methods were called correctly
        telnet_mock.sendline.assert_called_once_with("stats --smppcs")
        telnet_mock.expect.assert_called_once_with([r"(.+)\n" + STANDARD_PROMPT])
        telnet_mock.match.group.assert_called_once_with(0)

    # list_s method handles empty lines in smppcs output
    def test_list_s_empty_lines(self, mocker):
        # Mock the list_smpp method
        mocker.patch.object(
            Stats,
            "list_smpp",
            return_value=[
                {
                    "cid": "123",
                    "connected_at": ["2021-01-01"],
                    "bound_at": "2021-01-02",
                    "disconnected_at": ["2021-01-03"],
                    "submits": "10",
                    "delivers": "5",
                    "qos_err": "0",
                    "other_err": "0",
                }
            ],
        )

        # Create an instance of Stats
        stats = Stats(mocker.Mock())

        # Call the method under test
        result = stats.list_s()

        # Assert the result
        assert result == {
            "stats": [
                {
                    "cid": "123",
                    "connected_at": ["2021-01-01"],
                    "bound_at": "2021-01-02",
                    "disconnected_at": ["2021-01-03"],
                    "submits": "10",
                    "delivers": "5",
                    "qos_err": "0",
                    "other_err": "0",
                }
            ]
        }
