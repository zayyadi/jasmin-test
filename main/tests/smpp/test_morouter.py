# Generated by CodiumAI
from unittest.mock import Mock
from main.core.smpp.morouter import MORouter
from config.settings.com import STANDARD_PROMPT
from unittest.mock import MagicMock
from main.core.exceptions import ObjectNotFoundError
import random
from operator import call
from collections import OrderedDict


import pytest


class TestMORouter:
    # Test that the create() method of the MORouter class successfully creates a new MORouter with the given parameters.
    def test_create_morouter(self):
        # Create a mock telnet object
        telnet = Mock()

        # Create a MORouter instance
        morouter = MORouter(telnet)

        # Mock the telnet sendline and expect methods
        telnet.sendline.side_effect = [
            "morouter -a",
            "Adding a new MO Route...",
            "ok",
            "persist",
        ]
        telnet.expect.side_effect = ["Adding a new MO Route...", STANDARD_PROMPT]

        # Mock the retrieve method to raise an exception (indicating that the MORouter doesn't exist)
        morouter.retrieve = MagicMock(side_effect=ObjectNotFoundError)

        # Mock the get_router method to return a dummy MORouter
        morouter.get_router = MagicMock(
            return_value={
                "morouter": {
                    "order": "1",
                    "type": "DefaultRoute",
                    "connectors": [],
                    "filters": [],
                    "users": [],
                }
            }
        )

        # Mock the set_ikeys method to do nothing
        set_ikeys = MagicMock()

        # Mock the random.randrange method to return a fixed value
        random.randrange = MagicMock(return_value=1)

        # Create a dummy data dictionary for the create method
        data = {"type": "DefaultRoute", "order": "1", "connectors": [], "filters": []}

        # Call the create method
        result = morouter.create(data)

        # Assert that the telnet sendline and expect methods were called with the correct arguments
        telnet.sendline.assert_has_calls([call("morouter -a"), call("persist")])
        telnet.expect.assert_has_calls(
            [call("Adding a new MO Route..."), call(STANDARD_PROMPT)]
        )

        # Assert that the retrieve method was called to check if the MORouter already exists
        morouter.retrieve.assert_called_once_with("1")

        # Assert that the get_router method was not called (since the MORouter didn't exist)
        morouter.get_router.assert_not_called()

        # Assert that the set_ikeys method was called with the correct arguments
        set_ikeys.assert_called_once_with(
            telnet, OrderedDict({"type": "defaultroute", "order": "1", "connector": ""})
        )

        # Assert that the random.randrange method was called to generate a random order value
        random.randrange.assert_called_once_with(1, 99)

        # Assert that the result is a dictionary containing the created MORouter
        assert result == {
            "morouter": {
                "order": "1",
                "type": "DefaultRoute",
                "connectors": [],
                "filters": [],
                "users": [],
            }
        }
