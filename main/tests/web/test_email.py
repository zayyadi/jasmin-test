# Generated by CodiumAI
from main.web.views.content.smppccm import send_email_notification
from django.http import JsonResponse


# Dependencies:
# pip install pytest-mock
import pytest


class TestSendEmailNotification:
    # Sends an email notification to the admin email address provided in the function arguments.
    def test_send_email_notification_success(self, mocker):
        # Mock the necessary dependencies
        mocker.patch("os.getenv", return_value="test@example.com")
        mocker.patch("django.core.mail.send_mail")

        # Call the function under test
        response = send_email_notification(123)

        # Assert that the email was sent successfully
        assert response == JsonResponse(
            {"message": "Email notification sent successfully"}
        )

    # Returns a JsonResponse with a success message upon successful email notification.
    def test_send_email_notification_response(self, mocker):
        # Mock the necessary dependencies
        mocker.patch("os.getenv", return_value="test@example.com")
        mocker.patch("django.core.mail.send_mail")

        # Call the function under test
        response = send_email_notification(123)

        # Assert that the response is a JsonResponse with the correct message
        assert isinstance(response, JsonResponse)
        assert (
            response.content == b'{"message": "Email notification sent successfully"}'
        )

    # Raises an exception if the admin email address is not provided.
    def test_send_email_notification_no_admin_email(self, mocker):
        # Mock the necessary dependencies
        mocker.patch("os.getenv", return_value=None)
        mocker.patch("django.core.mail.send_mail")

        # Call the function under test and assert that it raises an exception
        with pytest.raises(Exception):
            send_email_notification(123)

    # Raises an exception if the email notification fails to send.
    def test_send_email_notification_send_failure(self, mocker):
        # Mock the necessary dependencies
        mocker.patch("os.getenv", return_value="test@example.com")
        mocker.patch("django.core.mail.send_mail", side_effect=Exception)

        # Call the function under test and assert that it raises an exception
        with pytest.raises(Exception):
            send_email_notification(123)

    # The function should handle multiple admin email addresses.
    def test_send_email_notification_multiple_admin_emails(self, mocker):
        # Mock the necessary dependencies
        mocker.patch("os.getenv", return_value="test@example.com")
        mocker.patch("django.core.mail.send_mail")

        # Call the function under test with multiple admin email addresses
        response = send_email_notification(123)

        # Assert that the email was sent successfully
        assert response == JsonResponse(
            {"message": "Email notification sent successfully"}
        )

    # The function should allow for custom email subject and message content.
    def test_send_email_notification_custom_content(self, mocker):
        # Mock the necessary dependencies
        mocker.patch("os.getenv", return_value="test@example.com")
        mocker.patch("django.core.mail.send_mail")

        # Call the function under test with custom subject and message
        response = send_email_notification(123)

        # Assert that the email was sent successfully
        assert response == JsonResponse(
            {"message": "Email notification sent successfully"}
        )
